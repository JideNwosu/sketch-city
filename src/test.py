# coding=UTF-8
from __future__ import print_function
import curses
import time
import locale

locale.setlocale(locale.LC_ALL,"")

maze_str = \
u"""█████████████████████████████████████████████████████████████████████████████████████████████████████
█   █   █                         █     █         █     █       █   █     █     █ █   █           █ █
█ █ █ █ █████████████ ███████████ █ █ █ █ ███████ ███ █ ███ ███ █ █ █ █ ███ █ █ █ █ █ █ █ ███████ █ █
█ █   █           █   █         █ █ █ █ █ █     █   █ █   █ █ █ █ █ █ █     █ █ █ █ █   █     █   █ █
█ █████ █████████ █ █████ ███ ███ ███ █ █ █████ ███ █ ███ █ █ █ █ ███ ███████ █ █ █ █████████ █ ███ █
█     █ █   █   █ █     █ █ █         █   █   █     █   █   █   █     █       █   █ █       █ █   █ █
█ ███ ███ █ █ █ █ █████ █ █ ███████████████ █ █ █████ █ █████ ███ █████ ███████ ███ █ █████ █ ███ █ █
█ █ █ █   █ █ █ █ █     █   █ █       █   █ █ █     █ █   █ █ █     █ █ █ █     █   █ █   █ █ █     █
█ █ █ █ ███ █ █ █ █ ███████ █ █ █████ █ █ █ █ █████ █████ █ █ █████ █ █ █ █ █████ █████ █ █ █ █████ █
█   █   █   █ █ █   █       █ █ █   █ █ █ █ █     █       █ █   █     █ █   █   █ █     █ █ █     █ █
█████████ ███ █ █████ ███████ █ █ █ █ █ █ █ █████ █████████ ███ █████ █ █████ █ █ ███ ███ █ █████ ███
█         █ █ █     █   █     █ █ █ █   █   █   █ █           █ █   █ █       █   █   █     █   █   █
█ █ ███████ █ █████ ███ █ ███ █ █ █ █████████ ███ █████ █ █████ █ █ █ ███████ █████ █ █████ █ █ ███ █
█ █ █     █ █     █ █   █   █ █   █       █     █     █ █     █   █ █   █   █     █ █ █   █   █ █   █
█ ███ ███ █ █████ █ █ ███ █ █████████████ █ ███ █████ █ █████ █████ █████ █ █████ █ ███ █ ███ ███ █ █
█ █   █ █ █       █   █   █           █   █   █     █ █     █             █     █   █   █   █ █   █ █
█ █ ███ █ █████████ █████████████ █ ███ █████ ███ █ █ ███ █████████████████████ █ ███ █████ ███ ███ █
█ █     █         █               █ █   █       █ █ █ █   █       █     █     █ █ █   █   █   █ █   █
█ █████ █████████ █████████████ █████ ███████████ █ █ █████ █████ █ ███ █ █████ █ █ ███ █████ █ █████
█   █   █     █   █   █     █   █     █           █ █   █   █   █   █   █ █     █ █ █ █     █ █     █
█ █ █ ███████ █ ███ █ █ ███ █ ███ █████ █████ █████████ █ ███ █ █████ ███ █ ███████ █ █ █ █ █ ███ █ █
█ █ █ █       █     █ █ █   █ █   █     █     █         █     █ █   █   █           █ █ █ █ █   █ █ █
█ █ █ █ █████ ███████ ███ ███ █ █████ █████████ ███████ ███████ █ █ ███ █████████████ █ █ █████ ███ █
█ █ █ █ █   █   █   █   █ █   █   █   █       █ █     █   █       █   █ █       █       █ █   █ █   █
█ ███ █ █ █ ███ █ █████ █ █ █████ █ ███ █████ █ █ ███ █ ███ ███████████ █ █████ █ ███████ █ █ █ █ ███
█     █ █ █   █   █     █   █       █   █   █ █   █   █ █   █       █   █ █ █   █ █       █ █   █   █
█ █████ █ ███████ █ █████ ███ ███████ ███ ███ █████ ███ █ ███ █████ █ ███ █ █ █████ █████ █ ███████ █
█       █       █ █ █     █   █     █ █ █         █ █   █   █ █ █   █   █   █   █   █     █   █   █ █
█████████ █████ █ █ ███ ███ ███ ███ █ █ █ ███████ █ ███ ███ █ █ █ █████ ███ ███ █ ███ ███████ █ █ █ █
█ █     █   █ █   █   █   █ █   █ █   █   █   █   █   █   █ █ █         █ █   █ █   █     █   █ █ █ █
█ █ █ █████ █ ███████ █████ █ ███ █████ ███ █ █ █████ █████ █ █████████ █ ███ █ █ █ █████ █ ███ █ █ █
█   █     █   █     █ █     █ █         █   █ █       █   █ █     █         █ █ █ █ █   █ █     █   █
█ █████ ███ ███ ███ █ █ █████ ███████ ███ ███ ███ █████ █ █ █████ ███████████ █ █ █ █ █ ███████████ █
█ █   █     █   █ █ █ █   █ █       █ █   █   █   █   █ █   █     █   █       █ █ █ █ █       █ █   █
█ █ █ ███████ ███ █ █ ███ █ ███████ ███ ███ ███████ █ █ █████ █ ███ █ █ ███████ ███ █ ███ ███ █ █ ███
█ █ █       █   █   █   █     █   █     █ █       █ █ █   █   █ █   █   █ █     █   █ █ █   █   █   █
█ █████████ ███ ███ █ █ █████ █ █ ███████ ███████ █ █ ███ █ █████ ███████ █ █████ █ █ █ ███ ███ ███ █
█ █   █   █   █   █   █   █   █ █         █     █   █ █   █       █   █   █ █     █ █ █   █   █   █ █
█ █ █ █ █ ███ ███ █████████ ███████ █████ █████ █████ █ █████████████ █ ███ █ ███████ █ █ ███ █████ █
█   █   █       █                   █               █                 █     █           █   █       █
█████████████████████████████████████████████████████████████████████████████████████████████████████"""

#maze_str = \
u"""█████████████████████
█       █     █     █
█ ███ ███ █ ███ ███ █
█   █     █     █ █ █
███ ███████ █████ █ █
█   █     █   █   █ █
█ ███ ███ ███ ███ █ █
█   █ █ █   █     █ █
███ █ █ ███████████ █
█   █ █       █     █
█ ███ █ █████ █ ███ █
█ █ █ █     █ █ █   █
█ █ █ █ ███ █ █ ███ █
█ █ █ █ █   █ █   █ █
█ █ █ █ █ ███ ███ █ █
█   █ █ █ █       █ █
███ █ █ █ █████████ █
█ █ █ █ █     █     █
█ █ █ ███████ █ █████
█   █         █     █
█████████████████████"""

# Turn maze_str into 2d list
maze = [[c for c in row] for row in maze_str.split("\n")]

def maze_simulation(screen, start_x=1, start_y=1):
  # Set up curses stuff 
  screen.clear()
  curses.curs_set(0)
  height, width = screen.getmaxyx()
  curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)
  curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
  curses.init_pair(3, curses.COLOR_BLUE, curses.COLOR_BLACK)

  # Draw maze initially
  for y in xrange(len(maze)):
    for x in xrange(len(maze[0])):
      screen.addstr(y, x, maze[y][x].encode("utf-8"), curses.color_pair(1))
  screen.refresh()

  visited, stack = set(), [(start_y, start_x)]

  while stack:
    pos = stack.pop()
    screen.addstr(pos[0], pos[1], u"\u2588".encode("utf-8"), curses.color_pair(3))
    if pos not in visited:
      visited.add(pos)
      if((pos[0]-1, pos[1]) not in visited and maze[pos[0]-1][pos[1]] == " "):
        stack.append((pos[0]-1, pos[1]))
      if((pos[0], pos[1]-1) not in visited and maze[pos[0]][pos[1]-1] == " "):
        stack.append((pos[0], pos[1]-1))
      if((pos[0]+1, pos[1]) not in visited and maze[pos[0]+1][pos[1]] == " "):
        stack.append((pos[0]+1, pos[1]))
      if((pos[0], pos[1]+1) not in visited and maze[pos[0]][pos[1]+1] == " "):
        stack.append((pos[0], pos[1]+1))
    screen.refresh()
    time.sleep(.1)
    screen.addstr(pos[0], pos[1], u"\u2588".encode("utf-8"), curses.color_pair(2))
  while True:
    continue

curses.wrapper(maze_simulation)
